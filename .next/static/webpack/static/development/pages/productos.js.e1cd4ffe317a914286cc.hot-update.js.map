{"version":3,"file":"static/webpack/static\\development\\pages\\productos.js.e1cd4ffe317a914286cc.hot-update.js","sources":["webpack:///./components/TableProducts.js"],"sourcesContent":["import  { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { forwardRef } from 'react';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport { _createProduct } from \"../actions/productAction\";\r\nimport { _updateProduct } from \"../actions/productAction\";\r\nimport { _deleteProduct } from \"../actions/productAction\";\r\nimport \"./Table.scss\"\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LocalMallIcon from '@material-ui/icons/LocalMall';\r\n\r\nconst columns =  [\r\n {title:'Id', field:'id', type:'numeric', hidden: true},\r\n  { title: 'Producto', field: 'name' },\r\n  { title: 'Descripcion', field: 'description' },\r\n  {\r\n    title: 'Cantidad',\r\n    field:'quantity',\r\n    type: 'numeric',\r\n  },\r\n  {\r\n    title: 'Precio / Unidad',\r\n    field:'price_unity',\r\n    type: 'numeric',\r\n  },\r\n  {\r\n    title: 'Precio Total',\r\n    field:'total_price',\r\n    type: 'numeric',\r\n  }\r\n\r\n]\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n  \r\n};\r\n\r\nclass TableUsers extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      products: [],\r\n      \r\n      //isLoading: false // Par défaut à false car il n'y a pas de chargement tant qu'on ne lance pas de recherche        \r\n     }\r\n     this._loadProducts() \r\n  }\r\n  async _loadProducts(){\r\n    const res = await fetch('http://localhost:8080/products/');\r\n    const data = await res.json();\r\n    \r\n    //console.log(`Show data fetched. Count: ${data.length}`  );\r\n    \r\n \r\n    this.setState(\r\n      { \r\n        products: [...this.state.products, ...data],  // une autre sintaxys  films: this.state.films.concat(data.results)\r\n       // films: data.results,  // une autre sintaxys  films: this.state.films.concat(data.results)\r\n     \r\n       \r\n      }\r\n    )\r\n  //  console.log(\"Rowsusu\"+this.state.numRows)\r\n  }\r\n \r\n  render() {\r\n  \r\n   \r\n    return (\r\n      \r\n     <Paper className='container'>\r\n    <MaterialTable\r\n       icons={tableIcons}\r\n       \r\n       title=\"Lista de Productos\"\r\n       columns={columns}\r\n       data={this.state.products}\r\n       actions={[\r\n        {\r\n          \r\n          icon: LocalMallIcon,\r\n          tooltip: 'Detalles producto',\r\n          onClick: (event, rowData) => //alert(\"You saved \" + rowData.name)window.location.href\r\n          window.location.href = `/user/${rowData.id_Document}`\r\n           \r\n        }\r\n       ]}\r\n    \r\n      editable={{\r\n        onRowAdd: newData =>\r\n          new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              _createProduct(newData)\r\n             \r\n              this.setState(\r\n                { \r\n                  products: [...this.state.products,newData]\r\n                }\r\n              )              \r\n            }, 600);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {                            \r\n                let toPut = Object.values(newData);\r\n                let tmp \r\n                var arraytoPut = [{id:toPut[0],name:toPut[1],description:toPut[2],quantity:parseInt(toPut[3]),price_unity:parseInt(toPut[4]),total_price:parseInt(toPut[5])}]\r\n               //   console.log(\"toPut> \" + JSON.stringify(toPut))\r\n                  _updateProduct(arraytoPut);\r\n               \r\n               // this.setState({products:[...data]},() => resolve());\r\n                  this.setState(() => {\r\n                  //  console.log(\"User to be update: \" + oldData.tableData.id)\r\n                //  const data = this.state.products\r\n                //  const index =  data.indexOf(oldData.tableData.id);\r\n              //    data[index] = newData;\r\n                   // console.log(\"User to be update: \" + JSON.stringify(this.state.users[oldData.tableData.id]))\r\n                    this.state.products[oldData.tableData.id] = newData;\r\n                // console.log(\"User already update: \" + JSON.stringify(this.state.users[oldData.tableData.id]))\r\n                    console.log(\"Do something to merge data\" + JSON.stringify([...this.state.products, newData]) )\r\n                  return({\r\n                    products:[...this.state.products,tmp]\r\n\r\n                  \r\n                  })                 \r\n                  });\r\n                                                         \r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: oldData =>\r\n          new Promise(resolve => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              console.log(JSON.stringify(oldData))\r\n              _deleteProduct(oldData)\r\n              this.setState(() => {\r\n      \r\n                return { products:this.state.products.filter(item => item.id !== oldData.id) };\r\n              });\r\n            }, 600);\r\n          }),\r\n     \r\n      }}\r\n    />\r\n    </Paper>\r\n    \r\n    \r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default TableUsers;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAoBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AARA;AAQA;AACA;;;;;;;;;;;;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AAGA;AAEA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;;;;AASA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAJA;AAUA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AADA;AAIA;AACA;AAZA;AAaA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AAEA;AACA;AACA;AA9BA;AA+BA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAXA;AA7CA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiFA;;;;AAnHA;AACA;AAsHA;;;;A","sourceRoot":""}